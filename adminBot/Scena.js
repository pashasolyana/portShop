const { Scenes, Markup } = require("telegraf")
const axios = require('axios')
const service = require('./services');
const services = require("./services");
const fs = require("fs");

class ScenesGenerator {

    category;
    price;
    from;
    to;

    CostEntryScene() {
        const entry = new Scenes.BaseScene('entry');
        entry.enter(async (ctx) => {
            await ctx.reply('–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', Markup.keyboard([
                ['–î–æ–±–∞–≤–∏–º –∑–∞–∫–∞–∑', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü']
            ]).resize().oneTime())
        });
        entry.on('text', async (ctx) => {
            console.log(ctx.message.text)
            if (ctx.message.text == "–î–æ–±–∞–≤–∏–º –∑–∞–∫–∞–∑") {
                ctx.scene.enter('order')
            }
            else if (ctx.message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü") {
                ctx.scene.enter('statistic')
            }
            else {
                await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.')
            }
        })
        return entry;
    }
    
    CreateOrder() {
        const order = new Scenes.BaseScene('order');
        order.enter(async (ctx) => {
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞', Markup.keyboard([
                ["–û–±—É–≤—å/–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞  üëü", "–¢–æ–ª—Å—Ç–æ–≤–∫–∏/–®—Ç–∞–Ω—ã  üëò"],
                ["–§—É—Ç–±–æ–ª–∫–∞/–®–æ—Ä—Ç—ã  üëï", "–ù–æ—Å–∫–∏/–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ  üß¶"],
            ]).resize().oneTime())
        });
        order.on('text', async (ctx) => {
            if (ctx.message.text == "–û–±—É–≤—å/–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞  üëü") {
                this.category = "–û–±—É–≤—å/–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞"
                ctx.scene.enter('title')
            } else if (ctx.message.text == "–¢–æ–ª—Å—Ç–æ–≤–∫–∏/–®—Ç–∞–Ω—ã  üëò") {
                this.category = "–¢–æ–ª—Å—Ç–æ–≤–∫–∏/–®—Ç–∞–Ω—ã"
                ctx.scene.enter('title')
            }
            else if (ctx.message.text == "–§—É—Ç–±–æ–ª–∫–∞/–®–æ—Ä—Ç—ã  üëï") {
                this.category = "–§—É—Ç–±–æ–ª–∫–∞/–®–æ—Ä—Ç—ã"
                ctx.scene.enter('title')
            }
            else if (ctx.message.text == "–ù–æ—Å–∫–∏/–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ  üß¶") {
                this.category = "–ù–æ—Å–∫–∏/–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ"
                ctx.scene.enter('title')
            }
            else {
                await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤.")
            }

        })
        return order;
    }  

    getTitle(){
        const title = new Scenes.BaseScene('title');
        title.enter(async (ctx) => {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
        });

        title.on('text', async (ctx) => {
            this.title = ctx.message.text
            ctx.scene.enter('price')
        })
        return title
    }
    
    getPrice(){
        const price = new Scenes.BaseScene('price');
        price.enter(async (ctx) => {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞')
        });

        price.on('text', async (ctx) => {
            
            if (Number(ctx.message.text)){
                this.price = Number(ctx.message.text)
                const order = await services.create({title : this.title, price : this.price, category : this.category })
                console.log(order)
                if(order){
                    await ctx.reply('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
                    ctx.scene.enter('entry')
                }
            }else {
                await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å")
            }

        })
        return price
    }

    getStatistic(){
        const statistic = new Scenes.BaseScene('statistic');
        statistic.enter(async (ctx) => {
            await ctx.replyWithMarkdown('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –∏–Ω—Ç–≤–µ—Ä–≤–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ *2023-02-18 2023-03-18*')
        });

        statistic.on('text', async (ctx) => {
            let dates = (ctx.message.text).split(' ')
            if(new Date(dates[0]) && new Date(dates[1])){
                this.from = new Date(dates[0])
                this.to = new Date(dates[1])
                console.log(isNaN(Date.parse(this.from)))
                if(!isNaN(Date.parse(this.from)) && !isNaN(Date.parse(this.to))){
                    await service.getStatistic(this.from, this.to,ctx)
                }else{
                    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É")
                }
            }else {
                await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É")
            }

        })
        return statistic
    }
}
module.exports = ScenesGenerator;

// 2500 - 1100 = –¥–æ—Ö–æ–¥